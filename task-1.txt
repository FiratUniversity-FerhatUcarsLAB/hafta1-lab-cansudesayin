Öğrenci No:250541096
AD-SOYAD:Cansude Sayın
seçtiğim algoritma "Optimum Bütçeli market alışverişi algoritması" bu ödevi ChatGpt'den yararlanarak yaptım.
Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
ChatGpt'ye sorduğum soru: "Optimum Bütçeli market alışverişi algoritması için adım adım algoritma geliştirmek istiyorum. Koşullu durumları ve tekrar eden işlemleri de içeren detaylı bir pseudocode yazmama yardım eder misin?"
ChatGpt'nin buna cevabı:
Harika fikir 🌱 “Optimum bütçeli market alışverişi algoritması” hem koşullu durumlar (if-else) hem de tekrar eden işlemler (döngüler) içermeye çok uygun bir senaryo.
Aşağıda sana adım adım açıklamalı şekilde ilerleyen ve sonunda tam bir pseudocode örneği vereceğim.

🎯 Amaç

Kullanıcının belirlediği bütçe içinde gereksinim önceliğine göre en uygun ürünleri satın almak.

🧩 1. Algoritmanın Temel Mantığı
Veri Girişi:
-Bütçe girilir (butce)
-Alışveriş listesi oluşturulur (ürün adı, fiyatı, önceliği)
Listeyi Önceliğe Göre Sırala:
-Öncelik değeri yüksek olan ürünler önce değerlendirilir.
Ürünleri Bütçe Sınırında Sepete Ekle:
-Her ürün için fiyat bütçeyi aşıyorsa alınmaz.
-Bütçe yeterliyse sepete eklenir ve bütçeden düşülür.
Fiyat Aşımı Kontrolü:
-Eğer ürün alınamıyorsa, daha ucuz bir alternatif var mı kontrol edilir.
-Yoksa ürün atlanır.
Sonuç Gösterimi:
-Alınan ürünlerin listesi
-Kalan bütçe miktarı


2. Koşullar ve Döngülerle Pseudocode
ALGORITMA OptimumButceliMarketAlisverisi

BAŞLA

    // 1. Girdiler
    YAZ "Toplam bütçenizi girin:"
    OKU butce

    YAZ "Kaç ürün almak istiyorsunuz?"
    OKU urun_sayisi

    BOS liste <- []

    // 2. Ürün bilgilerini al
    İÇİN i <- 1 TO urun_sayisi YAP
        YAZ "Ürün adı:"
        OKU ad
        YAZ "Fiyat:"
        OKU fiyat
        YAZ "Öncelik (1-5 arası, 5 = en önemli):"
        OKU oncelik

        listeyeEkle(liste, {ad, fiyat, oncelik})
    SON İÇİN

    // 3. Ürünleri önceliğe göre sırala (5'ten 1'e)
    liste <- sirala(liste, "oncelik", AZALAN)

    // 4. Sepet ve kalan bütçe başlat
    sepet <- []
    kalan_butce <- butce

    // 5. Her ürünü sırayla değerlendir
    İÇİN urun IN liste YAP
        
        EĞER urun.fiyat <= kalan_butce İSE
            sepetEkle(sepet, urun)
            kalan_butce <- kalan_butce - urun.fiyat
        DEĞİLSE
            YAZ urun.ad, " için bütçe yetersiz."
            YAZ "Daha ucuz bir alternatif var mı? (E/H)"
            OKU cevap

            EĞER cevap = "E" İSE
                YAZ "Alternatif ürün fiyatını girin:"
                OKU yeni_fiyat

                EĞER yeni_fiyat <= kalan_butce İSE
                    sepetEkle(sepet, {urun.ad, yeni_fiyat, urun.oncelik})
                    kalan_butce <- kalan_butce - yeni_fiyat
                DEĞİLSE
                    YAZ "Alternatif de bütçeyi aşıyor, ürün atlanıyor."
                SON EĞER
            SON EĞER
        SON EĞER
    SON İÇİN

    // 6. Sonuçları yazdır
    YAZ "--------------------------"
    YAZ "Alınan ürünler:"
    İÇİN urun IN sepet YAP
        YAZ urun.ad, " - ", urun.fiyat, " TL"
    SON İÇİN

    YAZ "Kalan bütçe: ", kalan_butce, " TL"
    YAZ "--------------------------"

BİTİR

SON ALGORITMA

ChatGpt'ye yazdığım: "peki bu algoritmayı temel ihtiyaçlara öncelik vererek de geliştirebilir miyiz?" burada bütçeyi de doğru kullanabilmek adına ihtiyaçlara öncelik vermek istedim.
ChatGpt'nin buna verdiği cevap:
Kesinlikle evet 👏
Bu aslında algoritmayı insan mantığına daha yakın hâle getirmenin en güzel yolu — yani “öncelik tabanlı optimum bütçe algoritması” diyebiliriz.
Burada amaç artık sadece bütçeyi aşmadan en fazla faydayı elde etmek değil,
aynı zamanda temel ihtiyaçları garanti altına almak 💡

Aşağıda hem mantığını hem de nasıl bir pseudocode’la geliştirilebileceğini anlatayım:

🎯 Amaç

Belirli bir bütçeyle alışveriş yaparken:
Öncelikle zorunlu (temel) ürünler alınır.
Kalan bütçeyle isteğe bağlı (sekonder) ürünlerden en faydalı olanlar seçilir.
Toplam fayda maksimize edilir, bütçe aşılmaz.

💭 Kriter Mantığı

Her ürünün:
Fiyatı (Fiyat[i])
Faydası (Değer[i])
Kategori (Zorunlu / İsteğeBağlı) bilgisi vardır.

Öncelik sırası:
Zorunlu > İsteğe bağlı

Ama zorunlular alınırken bile bütçe yetmiyorsa, fayda/fiyat oranı en yüksek olanlardan başlanır.

🔢 Pseudocode (Türkçe, detaylı)
BAŞLA

AL Bütçe
AL ÜrünListesi  // her ürün için: ad, fiyat, değer, kategori

ZORUNLU_LISTE ← Zorunlu ürünler
ISTEGE_BAGLI_LISTE ← İsteğe bağlı ürünler

ALINAN_URUNLER ← boş liste
TOPLAM_DEGER ← 0

// 1. ADIM: ZORUNLU ÜRÜNLERİ ALMA
HER ürün ∈ ZORUNLU_LISTE İÇİN
    EĞER Bütçe >= ürün.fiyat İSE
        ALINAN_URUNLER’E EKLE(ürün)
        Bütçe ← Bütçe - ürün.fiyat
        TOPLAM_DEGER ← TOPLAM_DEGER + ürün.değer
    DEĞİLSE
        YAZ "Bütçe yetersiz, zorunlu ürün alınamadı:", ürün.ad
    SON_EĞER
SON_İÇİN

// 2. ADIM: KALAN BÜTÇEYLE OPTİMAL EK ÜRÜN SEÇİMİ
// Öncelik: Değer/Fiyat oranı en yüksek olanları seç

HER ürün ∈ ISTEGE_BAGLI_LISTE İÇİN
    ürün.oran ← ürün.değer / ürün.fiyat
SON_İÇİN

ISTEGE_BAGLI_LISTE ← oran değerine göre AZALAN sırala

HER ürün ∈ ISTEGE_BAGLI_LISTE İÇİN
    EĞER Bütçe >= ürün.fiyat İSE
        ALINAN_URUNLER’E EKLE(ürün)
        Bütçe ← Bütçe - ürün.fiyat
        TOPLAM_DEGER ← TOPLAM_DEGER + ürün.değer
    SON_EĞER
SON_İÇİN

// 3. SONUÇLARI YAZDIR
YAZ "Alınan Ürünler:"
HER ürün ∈ ALINAN_URUNLER İÇİN
    YAZ ürün.ad, "(", ürün.kategori, ")", "fiyat:", ürün.fiyat, "değer:", ürün.değer
SON_İÇİN

YAZ "Kalan Bütçe:", Bütçe
YAZ "Toplam Fayda:", TOPLAM_DEGER

BİTİR

🧠 Ek Geliştirme Fikirleri

1.Minimum ihtiyaç eşiği:
Zorunlu ürünlerin belli bir yüzdesini (%80 gibi) mutlaka karşıla, sonra isteğe bağlılara geç.

2.Esnek öncelik puanları:
Ürünlere “öncelik_puanı” (örneğin 1–5 arası) verip, toplam faydayı şu şekilde hesaplayabilirsin:
fayda = değer * öncelik_puanı

3.Kategorilere göre dengeleme:
Örneğin bütçenin %60’ı temel ihtiyaçlara, %40’ı lüks ürünlere ayrılsın.

4.Kullanıcı tercihleriyle öğrenme:
Geçmiş alışverişlere göre, kullanıcının “gerçekte değer verdiği” ürün tiplerini öğrenip öncelikleri dinamik olarak ayarlamak (yapay zekâ benzeri geliştirme).

İstersen bir sonraki adımda bu algoritmayı örnek ürün listesi (örneğin ekmek, süt, çikolata, deterjan...) ile çalıştırıp nasıl seçim yaptığını tablo şeklinde gösterebilirim.
Bunu ister misin?

ChatGpt'ye verdiğim cevap: "olur, şimdi kategorilere göre dengelemeyi de ekleyelim ve minimum ihtiyaç eşiği de koyalım" burada bütçenin tamamı ihtiyaçlarda bitebilir ve isteklere sıra gelmeyebilir diye bütçeyi kategorilere göre dengelemeyi de eklemek istedim. Ayrıca ihtiyaçların belirli bir minimum miktarının karşılanması bütçeyi daha doğru kullandıracağından onu da ekledim.

ChatGpt'nin buna verdiği cevap: 
Mükemmel hamle 🎯
Şimdi algoritman artık gerçek bir optimum bütçe simülasyonuna dönüyor — çünkü hem önceliklendirme, hem dengeleme, hem de minimum ihtiyaç eşiği (örneğin “temel ihtiyaçların en az %80’i alınmalı”) devreye giriyor.

Aşağıya tüm bu mantıkları birleştirip Türkçe, detaylı, koşullu + döngülü pseudocode hâlinde yazıyorum 👇

💰 Optimum Bütçeli Alışveriş (Kategorili + Öncelikli + Eşikli)
🔹 Amaç:

Bütçeyi aşmadan,
Temel ihtiyaçların en az %80’ini karşılamak,
Bütçeyi %60 temel ihtiyaç, %40 isteğe bağlı ürünler arasında dengelemek,
Toplam faydayı maksimize etmek.

🔹 Pseudocode:
BAŞLA

AL Toplam_Bütçe
AL ÜrünListesi  // her ürün: ad, fiyat, değer, kategori ("Zorunlu" veya "İsteğeBağlı")

// Kategorilere göre bütçe ayır
ZORUNLU_BÜTÇE ← Toplam_Bütçe * 0.60
ISTEGE_BAGLI_BÜTÇE ← Toplam_Bütçe * 0.40

ZORUNLU_LISTE ← Zorunlu ürünler
ISTEGE_BAGLI_LISTE ← İsteğe bağlı ürünler

ALINAN_URUNLER ← boş liste
TOPLAM_DEGER ← 0

// 1. ADIM: ZORUNLU ÜRÜNLERİN ÖNCELİKLENDİRİLMESİ
HER ürün ∈ ZORUNLU_LISTE İÇİN
    ürün.oran ← ürün.değer / ürün.fiyat
SON_İÇİN

ZORUNLU_LISTE ← oran değerine göre AZALAN sırala

ZORUNLU_TOPLAM ← ZORUNLU_LISTE.uzunluk
ZORUNLU_HEDEF ← ZORUNLU_TOPLAM * 0.80  // Minimum %80’i alınmalı
ALINAN_ZORUNLU ← 0

// 2. ADIM: ZORUNLU ÜRÜNLERİ SATIN AL
HER ürün ∈ ZORUNLU_LISTE İÇİN
    EĞER ZORUNLU_BÜTÇE >= ürün.fiyat VE ALINAN_ZORUNLU < ZORUNLU_HEDEF İSE
        ALINAN_URUNLER’E EKLE(ürün)
        ZORUNLU_BÜTÇE ← ZORUNLU_BÜTÇE - ürün.fiyat
        TOPLAM_DEGER ← TOPLAM_DEGER + ürün.değer
        ALINAN_ZORUNLU ← ALINAN_ZORUNLU + 1
    DEĞİLSE_EĞER ALINAN_ZORUNLU < ZORUNLU_HEDEF VE ZORUNLU_BÜTÇE < ürün.fiyat İSE
        YAZ "Bütçe yetersiz, zorunlu ürün atlandı:", ürün.ad
    SON_EĞER
SON_İÇİN

// 3. ADIM: İSTEĞE BAĞLI ÜRÜNLERİ DEĞER/FİYAT ORANINA GÖRE SIRALA
HER ürün ∈ ISTEGE_BAGLI_LISTE İÇİN
    ürün.oran ← ürün.değer / ürün.fiyat
SON_İÇİN

ISTEGE_BAGLI_LISTE ← oran değerine göre AZALAN sırala

// 4. ADIM: KALAN BÜTÇEYLE İSTEĞE BAĞLI ÜRÜNLERİ SATIN AL
HER ürün ∈ ISTEGE_BAGLI_LISTE İÇİN
    EĞER ISTEGE_BAGLI_BÜTÇE >= ürün.fiyat İSE
        ALINAN_URUNLER’E EKLE(ürün)
        ISTEGE_BAGLI_BÜTÇE ← ISTEGE_BAGLI_BÜTÇE - ürün.fiyat
        TOPLAM_DEGER ← TOPLAM_DEGER + ürün.değer
    SON_EĞER
SON_İÇİN

// 5. ADIM: SONUÇLARI YAZDIR
YAZ "Alınan Ürünler:"
HER ürün ∈ ALINAN_URUNLER İÇİN
    YAZ ürün.ad, " (", ürün.kategori, ") ", "fiyat:", ürün.fiyat, " değer:", ürün.değer
SON_İÇİN

YAZ "Toplam Fayda:", TOPLAM_DEGER
YAZ "Kalan Bütçe (Zorunlu):", ZORUNLU_BÜTÇE
YAZ "Kalan Bütçe (İsteğe bağlı):", ISTEGE_BAGLI_BÜTÇE

EĞER ALINAN_ZORUNLU / ZORUNLU_TOPLAM < 0.80 İSE
    YAZ "Uyarı: Temel ihtiyaçların %80’i karşılanamadı."
DEĞİLSE
    YAZ "Temel ihtiyaç eşiği başarıyla sağlandı."
SON_EĞER

BİTİR

🔹 Bu sürüm neyi farklı yapıyor?
Özellik	Açıklama
💧 Kategorilere göre dengeleme	Bütçeyi otomatik olarak %60 zorunlu / %40 isteğe bağlı olarak bölüyor.
🧱 Minimum ihtiyaç eşiği	Temel ihtiyaçların en az %80’i alınmadan lüks ürünlere geçmiyor.
🧮 Fayda/Fiyat oranı	Hâlâ optimizasyon mantığını koruyor, en verimli ürünleri seçiyor.
⚠️ Uyarı sistemi	Temel ihtiyaçlar sağlanamazsa kullanıcıya bilgi veriyor.

İstersen şimdi buna uygun örnek ürün listesi (örnek: süt, ekmek, sabun, çikolata, meyve suyu, deterjan...) oluşturalım ve algoritmanın adım adım nasıl seçim yaptığını bir tablo olarak göstereyim.
Böylece ödevinde “örnek veriyle çalışan algoritma” kısmı da olur.
Yapayım mı o tabloyu?

burada verdiği cevaptan memmnun kaldığım için daha fazla bir işlem yaptırmadım.
